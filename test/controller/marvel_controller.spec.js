const controller = require('../../src/controller/marvel_controller');
const chai = require('chai');
const proxyquire = require('proxyquire');
const sinon = require('sinon');
const MarvelApiHost = 'http://gateway.marvel.com/v1/public/characters';
const { expect } = require('chai');

let apiHost = `${MarvelApiHost}/${charId}/${option}?ts=${credentials[0]}&apikey=${apikey}& hash=${credentials[1]}`;

describe('Marvel Controller', () => {
    it('Call getCredentials should return a object with timestamp and hash generated by md5', () => {
        const result = controller.getCredentials();
        expect(result).to.be.a('array')
    })

    it('Call fetchBy should return status 200', () => {
        const mData = JSON;
        const mResponse = { statusCode: 200, data: mData };
        const result = controller.getCredentials();
        const mRp = sinon.stub().resolves(mResponse);
        const { app } = proxyquire('./server', {
            'request-promise': mRp
        })

        chai
            .request(app)
            .get('/url')
            .end((err, res) => {
                expect(err).to.be.null;
                expect(res).to.have.status(200);
                expect(mRp.calledWith({ url: 'http//some-api-en-point', method: 'GET', resolveWithFullResponse: true }));
                done();
            });
    });

    it('Call fetchCharacter should return a json object populated by all marvel characteres', () => {

        // const req = {
        //     body: marvel
        // };
        // const res = {};
        // res.status = () => res;
        // res.send = sinon.spy();

        // controller.fetchCharacter(req, res);

        // expect(res.send.calledOnce).to.be.true;
        // expect(res.send.firstCall.args[0]).to.be.equal(JSON);

    });

    it('Call fetchComics should return a json object populated by marvel comics', () => {

    });

    it('Call fetchEvents should return a json object populated by marvel events', () => {

    });

    it('Call fetchSeries should return a json object populated by marvel series', () => {

    });

    it('Call fetchStories should return a json object populated by marvel stories', () => {

    });

});